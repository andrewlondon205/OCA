Microsoft Windows [Versione 10.0.19044.2604]
(c) Microsoft Corporation. Tutti i diritti sono riservati.

C:\Users\AlejandriaRamai>jshell
|  Welcome to JShell -- Version 18.0.1.1
|  For an introduction type: /help intro

jshell> LocalDate.now()
|  Error:
|  cannot find symbol
|    symbol:   variable LocalDate
|  LocalDate.now()
|  ^-------^

jshell> import java.time
|  Error:
|  cannot find symbol
|    symbol:   class time
|  import java.time;
|         ^-------^

jshell> import java.time.*

jshell> LocalDate.now()
$2 ==> 2023-03-14

jshell>


jshell> LocalTime.now()
$3 ==> 12:57:22.772655400

jshell> LocalDateTime.now()
$4 ==> 2023-03-14T12:57:34.717650700

jshell> LocalDate date1 = LocalDate.of(2023,Month.MARCH,14)
date1 ==> 2023-03-14

jshell> LocalTime time1 = LocalTime.of(16,11,20)
time1 ==> 16:11:20

jshell> LocalTime time1 = LocalTime.of(16,15)
time1 ==> 16:15

jshell> LocalDateTime dateTime1 = LocalDateTime.of(2023,Month.MARCH,14,16,14,28)
dateTime1 ==> 2023-03-14T16:14:28

jshell> time1
time1 ==> 16:15

jshell> time1 = LocalTime.of(16,18,32)
time1 ==> 16:18:32

jshell> time1
time1 ==> 16:18:32

jshell> LocalDateTime dateTime2 = LocalDateTime.of(date1,time1)
dateTime2 ==> 2023-03-14T16:18:32

jshell> LocalDate.of(2023,Month.AUGUST,35)
|  Exception java.time.DateTimeException: Invalid value for DayOfMonth (valid values 1 - 28/31): 35
|        at ValueRange.checkValidValue (ValueRange.java:319)
|        at ChronoField.checkValidValue (ChronoField.java:718)
|        at LocalDate.of (LocalDate.java:252)
|        at (#13:1)

jshell> LocalDate date = LocalDate.of(2023,03,14)
date ==> 2023-03-14

jshell> date
date ==> 2023-03-14

jshell> date = date.plusDays(2)
date ==> 2023-03-16

jshell> date.plusWeeks(1)
$17 ==> 2023-03-23

jshell> date
date ==> 2023-03-16

jshell> date
date ==> 2023-03-16

jshell> date = date.plusWeeks(1)
date ==> 2023-03-23

jshell> date
date ==> 2023-03-23

jshell> date = date.plusMonths(1)
date ==> 2023-04-23

jshell> date = date.plusMonths(4)
date ==> 2023-08-23

jshell> date = date.plusDays(2)
date ==> 2023-08-25

jshell> date = date.plusYears(15)
date ==> 2038-08-25

jshell> date = date.minusYears(1)
date ==> 2037-08-25

jshell> date
date ==> 2037-08-25

jshell> LocalTime time = LocalTime.of(16,43,15)
time ==> 16:43:15

jshell> time.plusHours(4)
$29 ==> 20:43:15

jshell> time.minusMinutes(32)
$30 ==> 16:11:15

jshell> time
time ==> 16:43:15

jshell> time = plusHours(4)
|  Error:
|  cannot find symbol
|    symbol:   method plusHours(int)
|  time = plusHours(4)
|         ^-------^

jshell> time = time.plusHours(4)
time ==> 20:43:15

jshell> time = time.minusMinutes(30)
time ==> 20:13:15

jshell> time
time ==> 20:13:15

jshell> date
date ==> 2037-08-25

jshell> date = date.toEpochDay()
|  Error:
|  incompatible types: long cannot be converted to java.time.LocalDate
|  date = date.toEpochDay()
|         ^---------------^

jshell> Period year = Period.ofYears(1)
year ==> P1Y

jshell> year
year ==> P1Y

jshell> Period month = Period.ofMonths(2)
month ==> P2M

jshell> date
date ==> 2037-08-25

jshell> date.plusMonths(month)
|  Error:
|  incompatible types: java.time.Period cannot be converted to long
|  date.plusMonths(month)
|                  ^---^

jshell> date.plus(month)
$40 ==> 2037-10-25

jshell> date
date ==> 2037-08-25

jshell> date = date.plus(month)
date ==> 2037-10-25

jshell> date
date ==> 2037-10-25

jshell> time
time ==> 20:13:15

jshell> period
|  Error:
|  cannot find symbol
|    symbol:   variable period
|  period
|  ^----^

jshell> Period period = Period.ofDays(2)
period ==> P2D

jshell> period
period ==> P2D

jshell> time.plus(period)
|  Exception java.time.temporal.UnsupportedTemporalTypeException: Unsupported unit: Days
|        at LocalTime.plus (LocalTime.java:1085)
|        at LocalTime.plus (LocalTime.java:125)
|        at Period.addTo (Period.java:909)
|        at LocalTime.plus (LocalTime.java:1019)
|        at (#47:1)

jshell> time
time ==> 20:13:15

jshell> date
date ==> 2037-10-25

jshell> import java.time.format
|  Error:
|  cannot find symbol
|    symbol:   class format
|  import java.time.format;
|         ^--------------^

jshell> import java.time.format.DateTimeFormatter

jshell> time.format(DateTimeFormatter.ISO_LOCAL_TIME)
$51 ==> "20:13:15"

jshell> date.format(DateTimeFormatter.ISO_LOCAL_DATE)
$52 ==> "2037-10-25"

jshell> date.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT))
|  Error:
|  cannot find symbol
|    symbol:   variable FormatStyle
|  date.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT))
|                                                ^---------^

jshell> DateTimeFormatter shortDate = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT)
|  Error:
|  cannot find symbol
|    symbol:   variable FormatStyle
|  DateTimeFormatter shortDate = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);
|                                                                  ^---------^

jshell> DateTimeFormatter shortDateTime =
   ...> DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);
|  Error:
|  cannot find symbol
|    symbol:   variable FormatStyle
|  DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);
|                                    ^---------^

jshell> DateTimeFormatter shortDate = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT)
|  Error:
|  cannot find symbol
|    symbol:   variable FormatStyle
|  DateTimeFormatter shortDate = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);
|                                                                  ^---------^

jshell> DateTimeFormatter shortDate = DateTimeFormatter.ofPatter("MMM dd, yyyy")
|  Error:
|  cannot find symbol
|    symbol:   method ofPatter(java.lang.String)
|  DateTimeFormatter shortDate = DateTimeFormatter.ofPatter("MMM dd, yyyy");
|                                ^------------------------^

jshell> date.format(DateTimeFormatter.ISO_LOCAL_DATE)
$53 ==> "2037-10-25"

jshell> DateTimeFormatter shortDate = DateTimeFormatter.ofPattern("MMM dd, yyyy")
shortDate ==> Text(MonthOfYear,SHORT)' 'Value(DayOfMonth,2)','' ... earOfEra,4,19,EXCEEDS_PAD)

jshell> date
date ==> 2037-10-25

jshell> date.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT))
|  Error:
|  cannot find symbol
|    symbol:   variable FormatStyle
|  date.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT))
|                                                ^---------^

jshell> shortDate
shortDate ==> Text(MonthOfYear,SHORT)' 'Value(DayOfMonth,2)','' 'Value(YearOfEra,4,19,EXCEEDS_PAD)

jshell> DateTimeFormatter
|  Error:
|  cannot find symbol
|    symbol:   variable DateTimeFormatter
|  DateTimeFormatter
|  ^---------------^

jshell> DateTimeFormatter
Signatures:
java.time.format.DateTimeFormatter

<press tab again to see documentation>
jshell> DateTimeFormatter
java.time.format.DateTimeFormatter
Formatter for printing and parsing date-time objects.
This class provides the main application entry point for printing and parsing and provides
common implementations of DateTimeFormatter :
  * Using predefined constants, such as #ISO_LOCAL_DATE
  * Using pattern letters, such as uuuu-MMM-dd
  * Using localized styles, such as long or medium
More complex formatters are provided by DateTimeFormatterBuilder .
The main date-time classes provide two methods - one for formatting, format(DateTimeFormatter
formatter) , and one for parsing, parse(CharSequence text, DateTimeFormatter formatter) .
For example:
      LocalDate date = LocalDate.now();
      String text = date.format(formatter);
      LocalDate parsedDate = LocalDate.parse(text, formatter);

In addition to the format, formatters can be created with desired Locale, Chronology, ZoneId,
and DecimalStyle.
The withLocale method returns a new formatter that overrides the locale. The locale affects
some aspects of formatting and parsing. For example, the ofLocalizedDate provides a formatter
that uses the locale specific date format.
The withChronology method returns a new formatter that overrides the chronology. If overridden,
the date-time value is converted to the chronology before formatting. During parsing the
date-time value is converted to the chronology before it is returned.
The withZone method returns a new formatter that overrides the zone. If overridden, the
date-time value is converted to a ZonedDateTime with the requested ZoneId before formatting.
During parsing the ZoneId is applied before the value is returned.

<press tab again to see next page>
jshell> DateTimeFormatter
The withDecimalStyle method returns a new formatter that overrides the DecimalStyle . The
DecimalStyle symbols are used for formatting and parsing.
Some applications may need to use the older java.text.Format class for formatting. The
#toFormat() method returns an implementation of java.text.Format .

Predefined Formatters
----------------------------------------------------------------------------------------------

Predefined Formatters| Formatter                    | Description                  | Example                      |
----------------------------------------------------------------------------------------------
| ofLocalizedDate(dateStyle)   | Formatter with date style    | '2011-12-03'                 |
|                              | from the locale              |                              |
----------------------------------------------------------------------------------------------
|  ofLocalizedTime(timeStyle)  | Formatter with time style    | '10:15:30'                   |
|                              | from the locale              |                              |
----------------------------------------------------------------------------------------------
|                              | Formatter with a style for   | '3 Jun 2008 11:05:30'        |
| ofLocalizedDateTime(dateTimeStyle) | date and time from the       |                              |
|                              | locale                       |                              |
----------------------------------------------------------------------------------------------
|                              | Formatter with date and time | '3 Jun 2008 11:05'           |
| ofLocalizedDateTime(dateStyle,timeStyle) | styles from the locale       |                              |
----------------------------------------------------------------------------------------------
|  #BASIC_ISO_DATE             | Basic ISO date               | '20111203'                   |
----------------------------------------------------------------------------------------------
|  #ISO_LOCAL_DATE             | ISO Local Date               | '2011-12-03'                 |

<press tab again to see next page>
jshell> DateTimeFormatter
----------------------------------------------------------------------------------------------
|  #ISO_OFFSET_DATE            | ISO Date with offset         | '2011-12-03+01:00'           |
----------------------------------------------------------------------------------------------
|  #ISO_DATE                   | ISO Date with or without     | '2011-12-03+01:00';          |
|                              | offset                       | '2011-12-03'                 |
----------------------------------------------------------------------------------------------
|  #ISO_LOCAL_TIME             | Time without offset          | '10:15:30'                   |
----------------------------------------------------------------------------------------------
|  #ISO_OFFSET_TIME            | Time with offset             | '10:15:30+01:00'             |
----------------------------------------------------------------------------------------------
|  #ISO_TIME                   | Time with or without offset  | '10:15:30+01:00'; '10:15:30' |
----------------------------------------------------------------------------------------------
|  #ISO_LOCAL_DATE_TIME        | ISO Local Date and Time      | '2011-12-03T10:15:30'        |
----------------------------------------------------------------------------------------------
|  #ISO_OFFSET_DATE_TIME       | Date Time with Offset        | '2011-12-03T10:15:30+01:00'  |
----------------------------------------------------------------------------------------------
|  #ISO_ZONED_DATE_TIME        | Zoned Date Time              | '2011-12-03T10:15:30+01:00[Europe/Paris]' |
----------------------------------------------------------------------------------------------
|  #ISO_DATE_TIME              | Date and time with ZoneId    | '2011-12-03T10:15:30+01:00[Europe/Paris]' |
----------------------------------------------------------------------------------------------
|  #ISO_ORDINAL_DATE           | Year and day of year         | '2012-337'                   |
----------------------------------------------------------------------------------------------
|  #ISO_WEEK_DATE              | Year and Week                | '2012-W48-6'                 |
----------------------------------------------------------------------------------------------
|  #ISO_INSTANT                | Date and Time of an Instant  | '2011-12-03T10:15:30Z'       |
----------------------------------------------------------------------------------------------

<press tab again to see next page>
jshell> DateTimeFormatter
|  #RFC_1123_DATE_TIME         | RFC 1123 / RFC 822           | 'Tue, 3 Jun 2008 11:05:30    |
|                              |                              | GMT'                         |
----------------------------------------------------------------------------------------------

Patterns for Formatting and Parsing
Patterns are based on a simple sequence of letters and symbols. A pattern is used to create a
Formatter using the #ofPattern(String) and #ofPattern(String, Locale) methods. For example, "d
MMM uuuu" will format 2011-12-03 as '3 Dec 2011'. A formatter created from a pattern can be
used as many times as necessary, it is immutable and is thread-safe.
For example:
      LocalDate date = LocalDate.now();
      DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy MM dd");
      String text = date.format(formatter);
      LocalDate parsedDate = LocalDate.parse(text, formatter);

All letters 'A' to 'Z' and 'a' to 'z' are reserved as pattern letters. The following pattern
letters are defined:
---------------------------------------------------------------------------------------------

Pattern Letters and
Symbols| Symbol               | Meaning              | Presentation         | Examples             |
---------------------------------------------------------------------------------------------
| G                    | era                  | text                 | AD; Anno Domini; A   |
---------------------------------------------------------------------------------------------
| u                    | year                 | year                 | 2004; 04             |
---------------------------------------------------------------------------------------------

<press tab again to see next page>
jshell> DateTimeFormatter
| y                    | year-of-era          | year                 | 2004; 04             |
---------------------------------------------------------------------------------------------
| D                    | day-of-year          | number               | 189                  |
---------------------------------------------------------------------------------------------
| M/L                  | month-of-year        | number/text          | 7; 07; Jul; July; J  |
---------------------------------------------------------------------------------------------
| d                    | day-of-month         | number               | 10                   |
---------------------------------------------------------------------------------------------
| g                    | modified-julian-day  | number               | 2451334              |
---------------------------------------------------------------------------------------------
| Q/q                  | quarter-of-year      | number/text          | 3; 03; Q3; 3rd       |
|                      |                      |                      | quarter              |
---------------------------------------------------------------------------------------------
| Y                    | week-based-year      | year                 | 1996; 96             |
---------------------------------------------------------------------------------------------
| w                    | week-of-week-based-year | number               | 27                   |
---------------------------------------------------------------------------------------------
| W                    | week-of-month        | number               | 4                    |
---------------------------------------------------------------------------------------------
| E                    | day-of-week          | text                 | Tue; Tuesday; T      |
---------------------------------------------------------------------------------------------
| e/c                  | localized            | number/text          | 2; 02; Tue; Tuesday; |
|                      | day-of-week          |                      | T                    |
---------------------------------------------------------------------------------------------
| F                    | day-of-week-in-month | number               | 3                    |
---------------------------------------------------------------------------------------------

<press tab again to see next page>
jshell> DateTimeFormatter
| a                    | am-pm-of-day         | text                 | PM                   |
---------------------------------------------------------------------------------------------
| B                    | period-of-day        | text                 | in the morning       |
---------------------------------------------------------------------------------------------
| h                    | clock-hour-of-am-pm  | number               | 12                   |
|                      | (1-12)               |                      |                      |
---------------------------------------------------------------------------------------------
| K                    | hour-of-am-pm (0-11) | number               | 0                    |
---------------------------------------------------------------------------------------------
| k                    | clock-hour-of-day    | number               | 24                   |
|                      | (1-24)               |                      |                      |
---------------------------------------------------------------------------------------------
| H                    | hour-of-day (0-23)   | number               | 0                    |
---------------------------------------------------------------------------------------------
| m                    | minute-of-hour       | number               | 30                   |
---------------------------------------------------------------------------------------------
| s                    | second-of-minute     | number               | 55                   |
---------------------------------------------------------------------------------------------
| S                    | fraction-of-second   | fraction             | 978                  |
---------------------------------------------------------------------------------------------
| A                    | milli-of-day         | number               | 1234                 |
---------------------------------------------------------------------------------------------
| n                    | nano-of-second       | number               | 987654321            |
---------------------------------------------------------------------------------------------
| N                    | nano-of-day          | number               | 1234000000           |
---------------------------------------------------------------------------------------------

<press tab again to see next page>
jshell> DateTimeFormatter
| V                    | time-zone ID         | zone-id              | America/Los_Angeles; |
|                      |                      |                      | Z; -08:30            |
---------------------------------------------------------------------------------------------
| v                    | generic time-zone    | zone-name            | Pacific Time; PT     |
|                      | name                 |                      |                      |
---------------------------------------------------------------------------------------------
| z                    | time-zone name       | zone-name            | Pacific Standard     |
|                      |                      |                      | Time; PST            |
---------------------------------------------------------------------------------------------
| O                    | localized            | offset-O             | GMT+8; GMT+08:00;    |
|                      | zone-offset          |                      | UTC-08:00            |
---------------------------------------------------------------------------------------------
| X                    | zone-offset 'Z' for  | offset-X             | Z; -08; -0830;       |
|                      | zero                 |                      | -08:30; -083015;     |
|                      |                      |                      | -08:30:15            |
---------------------------------------------------------------------------------------------
| x                    | zone-offset          | offset-x             | +0000; -08; -0830;   |
|                      |                      |                      | -08:30; -083015;     |
|                      |                      |                      | -08:30:15            |
---------------------------------------------------------------------------------------------
| Z                    | zone-offset          | offset-Z             | +0000; -0800; -08:00 |
---------------------------------------------------------------------------------------------
| p                    | pad next             | pad modifier         | 1                    |
---------------------------------------------------------------------------------------------
| '                    | escape for text      | delimiter            |                      |
---------------------------------------------------------------------------------------------

<press tab again to see next page>
jshell> DateTimeFormatter
| ''                   | single quote         | literal              | '                    |
---------------------------------------------------------------------------------------------
| [                    | optional section     |                      |                      |
|                      | start                |                      |                      |
---------------------------------------------------------------------------------------------
| ]                    | optional section end |                      |                      |
---------------------------------------------------------------------------------------------
| #                    | reserved for future  |                      |                      |
|                      | use                  |                      |                      |
---------------------------------------------------------------------------------------------
| {                    | reserved for future  |                      |                      |
|                      | use                  |                      |                      |
---------------------------------------------------------------------------------------------
| }                    | reserved for future  |                      |                      |
|                      | use                  |                      |                      |
---------------------------------------------------------------------------------------------
The count of pattern letters determines the format.
 Text : The text style is determined based on the number of pattern letters used. Less than 4
pattern letters will use the short form . Exactly 4 pattern letters will use the full form .
Exactly 5 pattern letters will use the narrow form . Pattern letters 'L', 'c', and 'q' specify
the stand-alone form of the text styles.
 Number : If the count of letters is one, then the value is output using the minimum number of
digits and without padding. Otherwise, the count of digits is used as the width of the output
field, with the value zero-padded as necessary. The following pattern letters have constraints
on the count of letters. Only one letter of 'c' and 'F' can be specified. Up to two letters of
'd', 'H', 'h', 'K', 'k', 'm', and 's' can be specified. Up to three letters of 'D' can be

<press tab again to see next page>
jshell> DateTimeFormatter
specified.
 Number/Text : If the count of pattern letters is 3 or greater, use the Text rules above.
Otherwise use the Number rules above.
 Fraction : Outputs the nano-of-second field as a fraction-of-second. The nano-of-second value
has nine digits, thus the count of pattern letters is from 1 to 9. If it is less than 9, then
the nano-of-second value is truncated, with only the most significant digits being output.
 Year : The count of letters determines the minimum field width below which padding is used. If
the count of letters is two, then a reduced two digit form is used. For printing, this outputs
the rightmost two digits. For parsing, this will parse using the base value of 2000, resulting
in a year within the range 2000 to 2099 inclusive. If the count of letters is less than four
(but not two), then the sign is only output for negative years as per SignStyle#NORMAL .
Otherwise, the sign is output if the pad width is exceeded, as per SignStyle#EXCEEDS_PAD .
 ZoneId : This outputs the time-zone ID, such as 'Europe/Paris'. If the count of letters is
two, then the time-zone ID is output. Any other count of letters throws
IllegalArgumentException .
 Zone names : This outputs the display name of the time-zone ID. If the pattern letter is 'z'
the output is the daylight saving aware zone name. If there is insufficient information to
determine whether DST applies, the name ignoring daylight saving time will be used. If the
count of letters is one, two or three, then the short name is output. If the count of letters
is four, then the full name is output. Five or more letters throws IllegalArgumentException .
If the pattern letter is 'v' the output provides the zone name ignoring daylight saving time.
If the count of letters is one, then the short name is output. If the count of letters is four,
then the full name is output. Two, three and five or more letters throw
IllegalArgumentException .
 Offset X and x : This formats the offset based on the number of pattern letters. One letter
outputs just the hour, such as '+01', unless the minute is non-zero in which case the minute is

<press tab again to see next page>
jshell> DateTimeFormatter
also output, such as '+0130'. Two letters outputs the hour and minute, without a colon, such as
'+0130'. Three letters outputs the hour and minute, with a colon, such as '+01:30'. Four
letters outputs the hour and minute and optional second, without a colon, such as '+013015'.
Five letters outputs the hour and minute and optional second, with a colon, such as
'+01:30:15'. Six or more letters throws IllegalArgumentException . Pattern letter 'X' (upper
case) will output 'Z' when the offset to be output would be zero, whereas pattern letter 'x'
(lower case) will output '+00', '+0000', or '+00:00'.
 Offset O : With a non-zero offset, this formats the localized offset based on the number of
pattern letters. One letter outputs the short form of the localized offset, which is localized
offset text, such as 'GMT', with hour without leading zero, optional 2-digit minute and second
if non-zero, and colon, for example 'GMT+8'. Four letters outputs the full form, which is
localized offset text, such as 'GMT, with 2-digit hour and minute field, optional second field
if non-zero, and colon, for example 'GMT+08:00'. If the offset is zero, only localized text is
output. Any other count of letters throws IllegalArgumentException .
 Offset Z : This formats the offset based on the number of pattern letters. One, two or three
letters outputs the hour and minute, without a colon, such as '+0130'. The output will be
'+0000' when the offset is zero. Four letters outputs the full form of localized offset,
equivalent to four letters of Offset-O. The output will be the corresponding localized offset
text if the offset is zero. Five letters outputs the hour, minute, with optional second if
non-zero, with colon. It outputs 'Z' if the offset is zero. Six or more letters throws
IllegalArgumentException .
 Optional section : The optional section markers work exactly like calling
DateTimeFormatterBuilder#optionalStart() and DateTimeFormatterBuilder#optionalEnd() .
 Pad modifier : Modifies the pattern that immediately follows to be padded with spaces. The pad
width is determined by the number of pattern letters. This is the same as calling
DateTimeFormatterBuilder#padNext(int) .

<press tab again to see next page>
jshell> DateTimeFormatter
|  Error:
|  cannot find symbol
|    symbol:   variable DateTimeFormatter
|  DateTimeFormatter
|  ^---------------^

jshell> date
date ==> 2037-10-25

jshell> DateTimeFormatter shortDateTime = DateTimeFormatter.ofLocalizedDate(dateStyle.SHORT)
|  Error:
|  cannot find symbol
|    symbol:   variable dateStyle
|  DateTimeFormatter shortDateTime = DateTimeFormatter.ofLocalizedDate(dateStyle.SHORT);
|                                                                      ^-------^

jshell> DateTimeFormatter shortDateTime = DateTimeFormatter.ofLocalizedDate(dateStyle)
|  Error:
|  cannot find symbol
|    symbol:   variable dateStyle
|  DateTimeFormatter shortDateTime = DateTimeFormatter.ofLocalizedDate(dateStyle);
|                                                                      ^-------^

jshell> DateTimeFormatter shortDateTime = DateTimeFormatter.ofPattern("yyyy mm dd")
shortDateTime ==> Value(YearOfEra,4,19,EXCEEDS_PAD)' 'Value(MinuteOfHour,2)' 'Value(DayOfMonth,2)

jshell> shortDateTime.format(date)
|  Exception java.time.temporal.UnsupportedTemporalTypeException: Unsupported field: MinuteOfHour
|        at LocalDate.get0 (LocalDate.java:693)
|        at LocalDate.getLong (LocalDate.java:673)
|        at DateTimePrintContext.getValue (DateTimePrintContext.java:308)
|        at DateTimeFormatterBuilder$NumberPrinterParser.format (DateTimeFormatterBuilder.java:2790)
|        at DateTimeFormatterBuilder$CompositePrinterParser.format (DateTimeFormatterBuilder.java:2411)
|        at DateTimeFormatter.formatTo (DateTimeFormatter.java:1853)
|        at DateTimeFormatter.format (DateTimeFormatter.java:1827)
|        at (#59:1)

jshell> datetime
|  Error:
|  cannot find symbol
|    symbol:   variable datetime
|  datetime
|  ^------^

jshell> date
date ==> 2037-10-25

jshell> time
time ==> 20:13:15

jshell> DateTimeFormatter customFormatter = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);
|  Error:
|  cannot find symbol
|    symbol:   variable FormatStyle
|  DateTimeFormatter customFormatter = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);
|                                                                            ^---------^

jshell> DateTimeFormatter customFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy 'at' hh:mma z");
customFormatter ==> Value(MonthOfYear,2)'/'Value(DayOfMonth,2)'/'Valu ... y,SHORT)' 'ZoneText(SHORT)

jshell> date.format(customFormatter)
|  Exception java.time.temporal.UnsupportedTemporalTypeException: Unsupported field: ClockHourOfAmPm
|        at LocalDate.get0 (LocalDate.java:693)
|        at LocalDate.getLong (LocalDate.java:673)
|        at DateTimePrintContext.getValue (DateTimePrintContext.java:308)
|        at DateTimeFormatterBuilder$NumberPrinterParser.format (DateTimeFormatterBuilder.java:2790)
|        at DateTimeFormatterBuilder$CompositePrinterParser.format (DateTimeFormatterBuilder.java:2411)
|        at DateTimeFormatter.formatTo (DateTimeFormatter.java:1853)
|        at DateTimeFormatter.format (DateTimeFormatter.java:1827)
|        at LocalDate.format (LocalDate.java:1792)
|        at (#63:1)

jshell> DateTimeFormatter FOMATTER = DateTimeFormatter.ofPattern("MM/dd/yyyy");
FOMATTER ==> Value(MonthOfYear,2)'/'Value(DayOfMonth,2)'/'Value(YearOfEra,4,19,EXCEEDS_PAD)

jshell> FORMATTER.format(date)
|  Error:
|  cannot find symbol
|    symbol:   variable FORMATTER
|  FORMATTER.format(date)
|  ^-------^

jshell> FOMATTER.format(date)
$65 ==> "10/25/2037"

jshell> DateTimeFormatter FOMATTER = DateTimeFormatter.ofPattern("Month, Day, Year");
|  Exception java.lang.IllegalArgumentException: Unknown pattern letter: o
|        at DateTimeFormatterBuilder.parsePattern (DateTimeFormatterBuilder.java:1891)
|        at DateTimeFormatterBuilder.appendPattern (DateTimeFormatterBuilder.java:1781)
|        at DateTimeFormatter.ofPattern (DateTimeFormatter.java:570)
|        at (#66:1)

jshell>
