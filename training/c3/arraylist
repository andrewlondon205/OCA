
AzureAD+AlejandriaRamai@NB-ARAMAI MINGW64 ~/Desktop
$ jshell
|  Welcome to JShell -- Version 18.0.1.1
|  For an introduction type: /help intro

jshell> import java.util.ArrayList;

jshell> ArrayList list1 = new ArrayList()
list1 ==> []

jshell> ArrayList list2 = new ArrayList(10)
list2 ==> []

jshell> ArrayLisst list3 = new ArrayList(list2)
|  Error:
|  cannot find symbol
|    symbol:   class ArrayLisst
|  ArrayLisst list3 = new ArrayList(list2);
|  ^--------^
|  Warning:
|  unchecked call to ArrayList(java.util.Collection<? extends E>) as a member of the raw type java.util.ArrayList
|  ArrayLisst list3 = new ArrayList(list2);
|                     ^------------------^

jshell> ArrayList list3 = new ArrayList(list2)
|  Warning:
|  unchecked call to ArrayList(java.util.Collection<? extends E>) as a member of the raw type java.util.ArrayList
|  ArrayList list3 = new ArrayList(list2);
|                    ^------------------^
list3 ==> []

jshell> ArrayList<String> list4 = new ArrayList<String>();
list4 ==> []

jshell> ArrayList<String> list5 = new ArrayList<>();
list5 ==> []

jshell> List<String> list6 = new ArrayList<> ();
list6 ==> []

jshell> ArrayList<String> list7 = new List <>();
|  Error:
|  java.util.List is abstract; cannot be instantiated
|  ArrayList<String> list7 = new List <>();
|                            ^-----------^
|  Error:
|  incompatible types: cannot infer type arguments for java.util.List<>
|      reason: no instance(s) of type variable(s) E exist so that java.util.List<E> conforms to java.util.ArrayList<java.lang.String>
|  ArrayList<String> list7 = new List <>();
|                                ^-----^

jshell> // compilator error

jshell> // compiler failure

jshell> lol
|  Error:
|  cannot find symbol
|    symbol:   variable lol
|  lol
|  ^-^

jshell> "ArrayList implements toString(), meaning that it is possible to see the contents just by printing it"
$8 ==> "ArrayList implements toString(), meaning that it is possible to see the contents just by printing it"

jshell> // the add() method inserts a new value in the ArrayList. Method signature can be seen below

jshell> // boolean add (E element)

jshell> // void add (int index, E element)

jshell> ArrayList aList = new ArrayList();
aList ==> []

jshell> aList.add("hawk")
|  Warning:
|  unchecked call to add(E) as a member of the raw type java.util.ArrayList
|  aList.add("hawk")
|  ^---------------^
$10 ==> true

jshell> aList.add(Boolean.TRUE)
|  Warning:
|  unchecked call to add(E) as a member of the raw type java.util.ArrayList
|  aList.add(Boolean.TRUE)
|  ^---------------------^
$11 ==> true

jshell> aList
aList ==> [hawk, true]

jshell> aList.add(45)
|  Warning:
|  unchecked call to add(E) as a member of the raw type java.util.ArrayList
|  aList.add(45)
|  ^-----------^
$13 ==> true

jshell> aList
aList ==> [hawk, true, 45]

jshell> aList.add(Integer.intValue(12))
|  Error:
|  method intValue in class java.lang.Integer cannot be applied to given types;
|    required: no arguments
|    found:    int
|    reason: actual and formal argument lists differ in length
|  aList.add(Integer.intValue(12))
|            ^--------------^

jshell> // ArrayList does not accept primitives

jshell> ArrayList<String> safer = new ArrayList<>();
safer ==> []

jshell> safer.add("sparow")
$16 ==> true

jshell> safer.add("jack")
$17 ==> true

jshell> safer.add(1234)
|  Error:
|  incompatible types: int cannot be converted to java.lang.String
|  safer.add(1234)
|            ^--^

jshell> // incompatible data types

jshell> safer,add(Boolean.TRUE)
|  Error:
|  ';' expected
|  safer,add(Boolean.TRUE)
|       ^
|  Error:
|  cannot find symbol
|    symbol:   method add(java.lang.Boolean)
|  safer,add(Boolean.TRUE)
|        ^-^

jshell> safer.add(Boolean.TRUE)
|  Error:
|  incompatible types: java.lang.Boolean cannot be converted to java.lang.String
|  safer.add(Boolean.TRUE)
|            ^----------^

jshell> safer
safer ==> [sparow, jack]

jshell> List<String> rockBands = new ArrayList<>();
rockBands ==> []

jshell> rockBands.add("acdc")
$20 ==> true

jshell> rockBands.add(1,"nirvana")

jshell> rockBands.add(1,"linkin park")

jshell> rockBands
rockBands ==> [acdc, linkin park, nirvana]

jshell> rockBands.add(3,"guns n roses")

jshell> rockBands
rockBands ==> [acdc, linkin park, nirvana, guns n roses]

jshell> rockBands.add(8,"mettalica")
|  Exception java.lang.IndexOutOfBoundsException: Index: 8, Size: 4
|        at ArrayList.rangeCheckForAdd (ArrayList.java:756)
|        at ArrayList.add (ArrayList.java:481)
|        at (#26:1)

jshell> // be careful with the indexes when adding elements to an ArrayList

jshell> // the index must not be greater than arrayList.length()

jshell> rockBands
rockBands ==> [acdc, linkin park, nirvana, guns n roses]

jshell> //remove() these methods are overloaded and and remove the first matching value in the ArrayList

jshell> // or remove element at a specified index

jshell> //method signatures as follows

jshell> // boolean remove(Object object) -> returns a boolean value

jshell> // E remove (int index) -> returns the removed object

jshell> rockBands
rockBands ==> [acdc, linkin park, nirvana, guns n roses]

jshell> rockBands.remove("acdc")
$29 ==> true

jshell> rockBands
rockBands ==> [linkin park, nirvana, guns n roses]

jshell> rockBands.remove(2)
$31 ==> "guns n roses"

jshell> rockBands
rockBands ==> [linkin park, nirvana]

jshell> rockBands.remove(10)
|  Exception java.lang.IndexOutOfBoundsException: Index 10 out of bounds for length 2
|        at Preconditions.outOfBounds (Preconditions.java:100)
|        at Preconditions.outOfBoundsCheckIndex (Preconditions.java:106)
|        at Preconditions.checkIndex (Preconditions.java:302)
|        at Objects.checkIndex (Objects.java:359)
|        at ArrayList.remove (ArrayList.java:504)
|        at (#33:1)

jshell> // if we try to remove an element using a non existing index, an exception will be thrown

jshell> rockBands
rockBands ==> [linkin park, nirvana]

jshell> rockBands.remove(-1)
|  Exception java.lang.IndexOutOfBoundsException: Index -1 out of bounds for length 2
|        at Preconditions.outOfBounds (Preconditions.java:100)
|        at Preconditions.outOfBoundsCheckIndex (Preconditions.java:106)
|        at Preconditions.checkIndex (Preconditions.java:302)
|        at Objects.checkIndex (Objects.java:359)
|        at ArrayList.remove (ArrayList.java:504)
|        at (#35:1)

jshell> // using negative indexes with remove method doesn't work

jshell> rockBands.add("the beattles")
$36 ==> true

jshell> rockBands
rockBands ==> [linkin park, nirvana, the beattles]

jshell> rockBands.remove("justin bieber")
|  Error:
|  illegal start of expression
|  rockBands(.removeâ–’"justin bieber")
|            ^

jshell> rockBands.remove("justin bieber")
$38 ==> false

jshell> // attempting to remove a non existing object returns false)

jshell> // SET  ->  method that changes one  of the elements of the ArrayList

jshell> // It doesnt change its size

jshell> // method signature is as follows

jshell> // E set(int index, E newElement)

jshell> rockBands
rockBands ==> [linkin park, nirvana, the beattles]

jshell> rockBands.add("acdc")
$40 ==> true

jshell> rockBands.add("metallica")
$41 ==> true

jshell> rockBands
rockBands ==> [linkin park, nirvana, the beattles, acdc, metallica]

jshell> rockBands.set(1,"Soda Stereo")
$43 ==> "nirvana"

jshell> // set() methods returns the replaced element

jshell> rockBands
rockBands ==> [linkin park, Soda Stereo, the beattles, acdc, metallica]

jshell> rockBands.set(-1,"Belanova")
|  Exception java.lang.IndexOutOfBoundsException: Index -1 out of bounds for length 5
|        at Preconditions.outOfBounds (Preconditions.java:100)
|        at Preconditions.outOfBoundsCheckIndex (Preconditions.java:106)
|        at Preconditions.checkIndex (Preconditions.java:302)
|        at Objects.checkIndex (Objects.java:359)
|        at ArrayList.set (ArrayList.java:441)
|        at (#45:1)

jshell> // be careful, negative indices are not allowed

jshell> rockBands
rockBands ==> [linkin park, Soda Stereo, the beattles, acdc, metallica]

jshell> rockBands.set(Integer.valueOf(1),"Rolling Stones")
$47 ==> "Soda Stereo"

jshell> rockBands
rockBands ==> [linkin park, Rolling Stones, the beattles, acdc, metallica]

jshell> // if we pass an integer to set(), it is converted to int

jshell> rockBands.set(new Integer(2),"guns n roses")
|  Warning:
|  Integer(int) in java.lang.Integer has been deprecated and marked for removal
|  rockBands.set(new Integer(2),"guns n roses")
|                ^------------^
$49 ==> "the beattles"

jshell> rockBands
rockBands ==> [linkin park, Rolling Stones, guns n roses, acdc, metallica]

jshell> rockBands(12324,"hithere")
|  Error:
|  cannot find symbol
|    symbol:   method rockBands(int,java.lang.String)
|  rockBands(12324,"hithere")
|  ^-------^

jshell> rockBands.set(12324,"hithere")
|  Exception java.lang.IndexOutOfBoundsException: Index 12324 out of bounds for length 5
|        at Preconditions.outOfBounds (Preconditions.java:100)
|        at Preconditions.outOfBoundsCheckIndex (Preconditions.java:106)
|        at Preconditions.checkIndex (Preconditions.java:302)
|        at Objects.checkIndex (Objects.java:359)
|        at ArrayList.set (ArrayList.java:441)
|        at (#51:1)

jshell> rockBands.set("hi","hi")
|  Error:
|  incompatible types: java.lang.String cannot be converted to int
|  rockBands.set("hi","hi")
|                ^--^

jshell> byte b = 45;
b ==> 45

jshell> rockBands
rockBands ==> [linkin park, Rolling Stones, guns n roses, acdc, metallica]

jshell> byte id = 0
id ==> 0

jshell> id
id ==> 0

jshell> rockBands.set(id,"michael jackson")
$56 ==> "linkin park"

jshell> rockBands
rockBands ==> [michael jackson, Rolling Stones, guns n roses, acdc, metallica]

jshell> long idx = 2
idx ==> 2

jshell> rockBands.set(idx,"katy perry")
|  Error:
|  incompatible types: possible lossy conversion from long to int
|  rockBands.set(idx,"katy perry")
|                ^-^

jshell> // isEmpty() and size()

jshell> // These look at how many of the slots are in use. The method signatures are as follows:

jshell> // boolean isEmpty()

jshell> // int size()

jshell> rockBands
rockBands ==> [michael jackson, Rolling Stones, guns n roses, acdc, metallica]

jshell> rockBands.isEmpty()
$60 ==> false

jshell> rockBands.clear()

jshell> rockBands
rockBands ==> []

jshell> rockBands.isEmpty()
$63 ==> true

jshell> rockBands.size()
$64 ==> 0

jshell> rockBands.add("rolling stones")
$65 ==> true

jshell> rockBands.add("acdc")
|  Error:
|  ')' expected
|  rockBands.add(â–’"acdc")
|                 ^

jshell> rockBands.add("acdc")
$66 ==> true

jshell> rockBands.add("metallica")
$67 ==> true

jshell> rockBands
rockBands ==> [rolling stones, acdc, metallica]

jshell> rockBands.size()
$69 ==> 3

jshell> // clear() method provides an easy way to discard all elements of the ArrayList. Method signature is as follows

jshell> // void clear()

jshell> rockBands
rockBands ==> [rolling stones, acdc, metallica]

jshell> rockBands.clear()

jshell> rockBands
rockBands ==> []

jshell>
<press tab again to see all possible completions; total possible completions: 584>
jshell> // contains() checks whether a certain value is in the ArrayList. Method Signature is as follows

jshell> // boolean contains(Object obj)

jshell> rockBands.add("acdc")
$73 ==> true

jshell> rockBands.add("nirvana")
$74 ==> true

jshell> rockBands.add("guns n roses")
$75 ==> true

jshell> rockBands.contains("hihi")
$76 ==> false

jshell> rockBands.contains("acdc")
$77 ==> true

jshell> // equals() ArrayList has a custom implementation of equals()
No such command

jshell> // equals() ArrayList has a custom implementation of equals() that does examine the elements inside the lists

jshell> // method signature as follows

jshell> // boolean equals(Object object)

jshell> List<String> european = new ArrayList<>()
european ==> []

jshell> european.add("erica")
$79 ==> true

jshell> european.add("vaccari")
$80 ==> true

jshell> european
european ==> [erica, vaccari]

jshell> List <String> italian = new ArrayList<>();
italian ==> []

jshell> italian.add("erica")
$83 ==> true

jshell> italian.add("vaccari")
$84 ==> true

jshell> italian
italian ==> [erica, vaccari]

jshell> european == italian
$86 ==> false

jshell> european.equals(italian)
$87 ==> true

jshell> european.add("1999")
$88 ==> true

jshell> european.equals(italian)
$89 ==> false

jshell> /**
   ...> primitive type      wrapper class      example
   ...> boolean
jshell> /**
   ...> primitive       wrapper class    example
   ...> boolean         Boolean          new Boolean(true)
   ...> byte            Byte             new Byte((byte) 1)
   ...> short           Short            new Short((short) 1)
   ...> int             Integer          new Integer(1)
   ...> long            Long             new Long(1)
   ...> float           Float            new Float(1.0)
   ...> double          Double           new Double(1.0)
   ...> char            Character        new Character('c')
   ...>
   ...> */

jshell> int primitive = Integer.parseInt("123")
primitive ==> 123

jshell> Integer wrapper = Integer.valueOf("123)
|  Error:
|  unclosed string literal
|  Integer wrapper = Integer.valueOf("123)
|                                    ^

jshell> Integer wrapper = Integer.valueOf("123")
wrapper ==> 123

jshell>

Boolean     Boolean.parseBoolean("true");   Boolean.valueOf("TRUE");
Byte        Byte.parseByte("1");            Byte.valueOf("2");
Short       Short.parseShort("1");          Short.valueOf("2");
Integer     Integer.parseInt("1");          Integer.valueOf("2");
Long        Long.parseLong("1");            Long.valueOf("2");
Float       Float.parseFloat("1");          Float.valueOf("2.2");
Double      Double.parseDouble("1");        Double.valueOf("2.2");
Character                    None                      None

$ jshell
|  Welcome to JShell -- Version 18.0.1.1
|  For an introduction type: /help intro

jshell> List<Double> weights = new ArrayList<>();
weights ==> []

jshell> weights.add(50.5)
$2 ==> true

jshell> weights.add(new Double(60))
|  Warning:
|  Double(double) in java.lang.Double has been deprecated and marked for removal
|  weights.add(new Double(60))
|              ^------------^
$3 ==> true

jshell> weights
weights ==> [50.5, 60.0]

jshell> weights.add(null)
$5 ==> true

jshell> weights
weights ==> [50.5, 60.0, null]

jshell> double d = weights.get(2)
|  Exception java.lang.NullPointerException: Cannot invoke "java.lang.Double.doubleValue()" because the return value of "java.util.List.get(int)" is null
|        at (#7:1)

jshell> List<Integer> numbers = new ArrayList<>();
numbers ==> []

jshell> numbers.add(1)
$9 ==> true

jshell> numbers.add(2)
$10 ==> true

jshell> numbers
numbers ==> [1, 2]

jshell> numbers.add(4)
$12 ==> true

jshell> numbers
numbers ==> [1, 2, 4]

jshell> numbers.remove(1)
$14 ==> 2

jshell> numbers
numbers ==> [1, 4]

jshell> numbers.remove(Integer.valueOf(1))
$16 ==> true

jshell> numbers
numbers ==> [4]

jshell> // converting between array and list

jshell> List<String> list = new ArrayList<>();
list ==> []

jshell> list.add("a")
$19 ==> true

jshell> list.add("b")
$20 ==> true

jshell> list.add("c")
$21 ==> true

jshell> list
list ==> [a, b, c]

jshell> String [] array = list.toArray()
|  Error:
|  incompatible types: java.lang.Object[] cannot be converted to java.lang.String[]
|  String [] array = list.toArray();
|                    ^------------^

jshell> list
list ==> [a, b, c]

jshell> String [] array = list.toArray(new String[0])
array ==> String[3] { "a", "b", "c" }

jshell> array
array ==> String[3] { "a", "b", "c" }

jshell> list
list ==> [a, b, c]

jshell> list.add("d")
$27 ==> true

jshell> list
list ==> [a, b, c, d]

jshell> array
array ==> String[3] { "a", "b", "c" }

jshell> double [] numbers = new int [2]
|  Error:
|  incompatible types: int[] cannot be converted to double[]
|  double [] numbers = new int [2];
|                      ^---------^

jshell> list
list ==> [a, b, c, d]

jshell> array
array ==> String[3] { "a", "b", "c" }

jshell> String [] alpha = {"1","2","3"}
alpha ==> String[3] { "1", "2", "3" }

jshell> List<String> betha = Arrays.asList(alpha)
betha ==> [1, 2, 3]

jshell> betha
betha ==> [1, 2, 3]

jshell> betha.add(4)
|  Error:
|  incompatible types: int cannot be converted to java.lang.String
|  betha.add(4)
|            ^

jshell> betha.add("4")
|  Exception java.lang.UnsupportedOperationException
|        at AbstractList.add (AbstractList.java:153)
|        at AbstractList.add (AbstractList.java:111)
|        at (#35:1)

jshell> betha.set(0,"421")
$36 ==> "1"

jshell> betha
betha ==> [421, 2, 3]

jshell> alpha
alpha ==> String[3] { "421", "2", "3" }

jshell> betha.remove(1)
|  Exception java.lang.UnsupportedOperationException
|        at AbstractList.remove (AbstractList.java:167)
|        at (#39:1)

jshell> List<String> seq = Arrays.asList("one","two")
seq ==> [one, two]

jshell> seq
seq ==> [one, two]

jshell> seq.add("three")
|  Exception java.lang.UnsupportedOperationException
|        at AbstractList.add (AbstractList.java:153)
|        at AbstractList.add (AbstractList.java:111)
|        at (#42:1)

jshell> //SORTING ARRAYLIST

jshell> List<Integer> numbers = new ArrayList<>();
numbers ==> []

jshell> numbers.add(99)
$44 ==> true

jshell> numbers.add(5)
$45 ==> true

jshell> numbers.add(81)
$46 ==> true

jshell> Collections.sort(numbers)

jshell> numbers
numbers ==> [5, 81, 99]

jshell>


