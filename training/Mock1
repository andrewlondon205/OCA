Exam 1:

ATTEMPT 1: 40/70 -> 57%

Question 1: What will be the result of compiling and executing Test class?

package com.udayan.oca;

public class Test {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder();
        System.out.println(sb.append(null).length());
    }
}
------------------------------------------------------
Right Answer
- Compilation error
Explanation:
-'append' method is overloaded in StringBuilder class: append(String), append(StringBuffer) and append(char[]) etc.
- In this case compiler gets confused as to which method `append(null)` can be tagged because String, StringBuffer
  and char[] are not related to each other in multilevel inheritance. Hence `sb.append(null)` causes compilation error.

Question 4: Consider bellow code:

//Test.java
package com.udayan.oca;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.function.Predicate;

class Employee {
     private String name;
     private int age;
     private double salary;

     public Employee(String name, int age, double salary) {
         this.name = name;
         this.age = age;
         this.salary = salary;
     }

     public String getName() {
         return name;
     }

    public int getAge() {
         return age;
     }

    public double getSalary() {
         return salary;
     }

    public String toString() {
         return name;
     }
}

public class Test {
     public static void main(String [] args) {
         List<Employee> list = new ArrayList<>();
         list.add(new Employee("James", 25, 15000));
         list.add(new Employee("Lucy", 23, 12000));
         list.add(new Employee("Bill", 27, 10000));
         list.add(new Employee("Jack", 19, 5000));
         list.add(new Employee("Liya", 20, 8000));

         process(list, /*INSERT*/);

         System.out.println(list);
     }

     private static void process(List<Employee> list, Predicate<Employee> predicate) {
         Iterator<Employee> iterator = list.iterator();
         while(iterator.hasNext()) {
             if(predicate.test(iterator.next()))
             iterator.remove();
         }
      }
}

------------------------------------------------------------------------------------------------------------------------
Right Answer:

- e -> e.getSalary() >= 10000
- (Employee e) -> e.getSalary() >= 10000

Jack's salary is 5000 and Liya's salary is 8000. If Employee's salary is >= 10000 then that Employee object is removed from the list.

Allowed lambda expression is:

(Employee e) -> { return e.getSalary() >= 10000; },

Can be simplified to:  (e) -> { return e.getSalary() >= 10000; } => type can be removed from left side of the expression.
Further simplified to: e -> { return e.getSalary() >= 10000; } => if there is only one parameter in left part, then round brackets (parenthesis) can be removed.
Further simplified to: e -> e.getSalary() >= 10000 => if there is only one statement in the right side then semicolon inside the body, curly brackets and return statement can be removed. But all 3 [return, {}, ;] must be removed together.
NOTE: there should not be any space between - and > of arrow operator.
